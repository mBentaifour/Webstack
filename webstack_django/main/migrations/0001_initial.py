# Generated by Django 4.2.17 on 2025-01-09 05:32

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('website', models.URLField(blank=True)),
                ('quality_tier', models.CharField(choices=[('premium', 'Premium'), ('professional', 'Professionnel'), ('standard', 'Standard')], default='standard', max_length=20)),
                ('country_of_origin', models.CharField(blank=True, max_length=100, verbose_name="Pays d'origine")),
                ('warranty_info', models.TextField(blank=True, verbose_name='Information de garantie')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Marque',
                'verbose_name_plural': 'Marques',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'carts',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('category_type', models.CharField(choices=[('hand_tools', 'Outils à main'), ('power_tools', 'Outils électriques'), ('measuring', 'Mesure et traçage'), ('safety', 'Sécurité et protection'), ('hardware', 'Quincaillerie'), ('garden', 'Jardin'), ('workshop', 'Atelier'), ('plumbing', 'Plomberie'), ('electrical', 'Électricité'), ('painting', 'Peinture')], max_length=50, verbose_name='Type de catégorie')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('icon', models.CharField(blank=True, help_text="Classe d'icône (ex: fas fa-wrench)", max_length=50)),
                ('featured_brands', models.JSONField(blank=True, default=list)),
                ('discount_count', models.IntegerField(default=0)),
                ('tips', models.JSONField(blank=True, default=list, help_text="Conseils d'utilisation pour cette catégorie")),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Catégorie',
                'verbose_name_plural': 'Catégories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('confirmed', 'Confirmée'), ('preparing', 'En préparation'), ('shipped', 'Expédiée'), ('delivered', 'Livrée'), ('cancelled', 'Annulée')], default='pending', max_length=20)),
                ('payment_status', models.CharField(choices=[('pending', 'En attente'), ('paid', 'Payée'), ('failed', 'Échouée'), ('refunded', 'Remboursée')], default='pending', max_length=20)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('shipping_address', models.TextField()),
                ('shipping_method', models.CharField(max_length=100)),
                ('tracking_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'orders',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField(verbose_name='Description')),
                ('usage_type', models.CharField(choices=[('professional', 'Professionnel'), ('diy', 'Bricolage'), ('industrial', 'Industriel')], default='diy', max_length=20, verbose_name="Type d'utilisation")),
                ('power_source', models.CharField(choices=[('manual', 'Manuel'), ('electric', 'Électrique'), ('battery', 'Batterie'), ('pneumatic', 'Pneumatique')], default='manual', max_length=20, verbose_name="Source d'énergie")),
                ('specifications', models.JSONField(blank=True, default=dict, help_text='Caractéristiques techniques du produit')),
                ('features', models.JSONField(blank=True, default=list, help_text='Fonctionnalités principales')),
                ('safety_instructions', models.TextField(blank=True, verbose_name='Consignes de sécurité')),
                ('maintenance_tips', models.TextField(blank=True, verbose_name="Conseils d'entretien")),
                ('warranty_duration', models.IntegerField(default=0, help_text='Durée de garantie en mois')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Prix')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount', models.IntegerField(default=0)),
                ('stock', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Stock')),
                ('min_stock_alert', models.IntegerField(default=5, verbose_name='Alerte stock minimum')),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Image')),
                ('additional_images', models.JSONField(blank=True, default=list)),
                ('video_url', models.URLField(blank=True, verbose_name='URL de la vidéo de démonstration')),
                ('is_new', models.BooleanField(default=False, verbose_name='Nouveau')),
                ('is_featured', models.BooleanField(default=False, verbose_name='Mis en avant')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3)),
                ('rating_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='products/thumbnails/', verbose_name='Miniature')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='main.brand', verbose_name='Marque')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='main.category', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Produit',
                'verbose_name_plural': 'Produits',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupabaseUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supabase_uid', models.CharField(max_length=255, unique=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('preferences', models.JSONField(blank=True, default=dict)),
                ('newsletter_subscription', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product_id', models.UUIDField()),
                ('product_name', models.CharField(max_length=200)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.order')),
            ],
            options={
                'db_table': 'order_items',
            },
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.supabaseuser'),
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_changed', models.IntegerField(verbose_name='Quantité modifiée')),
                ('reason', models.CharField(choices=[('purchase', 'Achat'), ('sale', 'Vente'), ('return', 'Retour'), ('adjustment', 'Ajustement'), ('damage', 'Dommage'), ('loss', 'Perte')], max_length=20, verbose_name='Raison')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_records', to='main.product', verbose_name='Produit')),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Enregistré par')),
            ],
            options={
                'verbose_name': 'Mouvement de stock',
                'verbose_name_plural': 'Mouvements de stock',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('product_id', models.UUIDField()),
                ('quantity', models.IntegerField(default=1)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.cart')),
            ],
            options={
                'db_table': 'cart_items',
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.supabaseuser'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note')),
                ('comment', models.TextField(verbose_name='Commentaire')),
                ('pros', models.TextField(blank=True, verbose_name='Points positifs')),
                ('cons', models.TextField(blank=True, verbose_name='Points négatifs')),
                ('usage_duration', models.CharField(blank=True, max_length=50, verbose_name="Durée d'utilisation")),
                ('usage_frequency', models.CharField(blank=True, max_length=50, verbose_name="Fréquence d'utilisation")),
                ('would_recommend', models.BooleanField(default=True, verbose_name='Recommande le produit')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='main.product', verbose_name='Produit')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Avis',
                'verbose_name_plural': 'Avis',
                'ordering': ['-created_at'],
                'unique_together': {('product', 'user')},
            },
        ),
    ]
